specification {

    element enterprise
    element softwaresystem
    element container
    element component
  
    element person {
      style {
        color amber
        shape person
      }
    }
    
    element database {
      style {
        shape storage
        color red
      }
    }

    element externo {
      style {
        shape queue
        color green
      }
    }
      element siapi {
        style {
          shape browser
          color primary
        }
      }    
  }
  
  model {
  
    customer = person "Usuário" {
      description "Cliente do sistema que pode ser um técnico, inventor ou administrador"
    }

    gpas = externo "GPAS" {
      description: "Sistema externo onde sao configurados os acessos/perfis dos usuários"
    }
  
    basePB = database "Base de usuários Petrobras" {
      description: "Armazena todos os usuários da empresa usando a chave como base"
    }

    siapi = softwaresystem "Visão: Topologia do sistema" {
      description: "Sistema de Transferencia 
                    e 
                    Propriedade Intelectual"
      technology: "Asp.net - Rodando em Windows Server 2012."
        style {
          shape rectangle
        }
        component singlePage 'Frontend' {
          description 'Asp.net - Rodando em Windows Server 2012'
          style {
            shape browser
          }
        }
        component backend 'Backend' {
          description '
            Implementa a parte de Business
            expondo dados ao Frontend via Jquery
            '
        }
        component bd 'Banco de Dados' {
          description 'Oracle 19G'
          style {
            shape storage
          }
        }
        component siapiconsole "Siapi Console" {
          description: "Sistema responsável pelos Agendamentos do sistema"
          technology: "Windows Application"
          style {
            color: slate
          }
        }
    }

      sistemaexterno = softwaresystem "Sistemas Externos" {
        description: "teste de container"
        
        lgpd = externo "LGPD" {
          description: "Sistema externo que consome dados de uma view exclusiva"
        }
    
        paineis = externo "PAINEIS" {
          description: "Sistema externo que consome dados de uma view exclusiva"
        }
      }
  
      servicos = softwaresystem "Visão: Servicos oferecidos pelo sistema" {
        description: "Ações disponíveis aos usuários"
  
        singlePageApplication = container "Single-Page Application" {
          description: "Fornece toda a funcionalidade de Propriedade Intelectual aos clientes através de seu navegador da web."
          technology: "Asp.Net"
          style {
            shape browser
          }
        }
        webApplication = container "Aplicação Web" {
          description: "Fornece o conteúdo estático e o aplicativo de página única do sistema"
          technology: "DotNet 4.5"
        }
        apiApplication = container "API Application" {
          description: "Provides Internet banking functionality via a JSON/HTTPS API."
          technology: "Java and Spring MVC"
  
          signinController = component "Sign In Controller" {
            description: "Allows users to sign in to the Internet Banking System."
            technology: "Spring MVC Rest Controller"
          }
        }
          accountsSummaryController = component "Accounts Summary Controller" {
            description: "Provides customers with a summary of their bank accounts."
            technology: "Spring MVC Rest Controller"
          }
          resetPasswordController = component "Reset Password Controller" {
            description: "Allows users to reset their passwords with a single use URL."
            technology: "Spring MVC Rest Controller"
          }
          securityComponent = component "Security Component" {
            description: "Provides functionality related to signing in, changing passwords, etc."
            technology: "Spring Bean"
          }
          mainframeBankingSystemFacade = component "Mainframe Banking System Facade" {
            description: "A facade onto the mainframe banking system."
            technology: "Spring Bean"
          }
          emailComponent = component "E-mail Component"{
            description:  "Sends e-mails to users."
            technology: "Spring Bean"
          }
        database = database "Database" {
          description: "Armazena dados do sistema, credenciais de autenticação com hash, logs de acesso, etc."
          technology: "Oracle 19G"
        }
      }
    
    // relationships between people and software systems
    customer -> servicos "Acessa o sistema via browser"
    servicos -> basePB "Gets account information from, and makes payments using"
    servicos -> siapiconsole "Eniva e-mail usando"
    siapiconsole -> customer "Envia e-mails para"
    siapiconsole -> backend  "Efetua requisição de 
                              envio de e-mails para"
    
    gpas -> basePB "Consulta e valida"
    customer -> siapi "Acessa via browser"
    siapi -> basePB "Uses"
    gpas -> bd "Consome dados de 
                view exclusiva"
    lgpd -> bd "Consome dados de 
                view exclusiva"
    paineis -> bd "Consome dados de 
                   view exclusiva"
    

    // relationships to/from containers
    customer -> gpas "Acessa via ferramenta SAP"
    customer -> webApplication "Acesse usando: stpi.cenpes.petrobras.com.br"
    customer -> singlePageApplication "Utiliza serviços do sistema"
    customer -> singlePage "Utiliza a estrutura"
    webApplication -> singlePageApplication "Entrega aos usuário o Web Browser do sistema"
    

    // relationships to/from components
    singlePageApplication -> signinController "Makes API calls to"
    singlePageApplication -> accountsSummaryController "Makes API calls to"
    singlePageApplication -> resetPasswordController "Makes API calls to"
    signinController -> securityComponent "Uses"
    accountsSummaryController -> mainframeBankingSystemFacade "Uses"
    resetPasswordController -> securityComponent "Uses"
    resetPasswordController -> emailComponent "Uses"
    securityComponent -> database "Reads from and writes to"
    mainframeBankingSystemFacade -> basePB "Makes API calls to"
    emailComponent -> siapiconsole "Sends e-mail using"
    singlePage -> backend "Efetua 
                           requisicao para"
    backend -> bd "Solicita dados para"
    backend -> singlePage "Disponibiliza 
                           dados para"
    bd -> backend "Retorna dado solicitado para"
    
  }
  views {
    view siapi of siapi {
      include 
        customer ,
        singlePage,
        bd,
        backend,
        siapiconsole,
        sistemaexterno,
        siapi
        style siapi {
        color muted
      }
      
      style sistemaexterno {
        color amber
      }
    }
    view ibsContainers of servicos {
      title "Internet Banking System - Containers"
  
      include
        *,
        -> customer
    }
    view customer of customer {
      include
        *,
        customer -> servicos.*, siapi.*
      exclude webApplication, siapiconsole, backend, bd
    }
  
    view spa of singlePageApplication {
      include
        *,
        apiApplication,
        servicos,
        -> singlePageApplication ->
  
      style * {
        color muted
      }
  
      style singlePageApplication, customer {
        color primary
      }
    }

    view ext of sistemaexterno {
      include
        *,
        bd,
        siapi,
        -> singlePageApplication ->
  
      style * {
        color muted
      }
  
      style sistemaexterno, siapi {
        color primary
      }

      style lgpd, paineis {
        color green
      }
    }
  
    view support of gpas {
      include
        *
    }
  
    view apiApp of servicos.apiApplication {
      title "API Application - Components"
  
      include *
  
      style * {
        color muted
      }
  
      style singlePageApplication {
        color secondary
      }
  
      style apiApplication, apiApplication.* {
        color primary
      }
    }
  
    view webapp of webApplication {
      include
        *,
        servicos
    }
  }
  