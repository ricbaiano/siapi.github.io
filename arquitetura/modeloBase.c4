specification {

    element enterprise
    element softwaresystem
    element container
    element component
  
    element person {
      style {
        color amber
        shape person
      }
    }
  
    element database {
      style {
        shape storage
        color red
      }
    }

    element externo {
      style {
        shape queue
        color green
      }
    }
      element siapi {
        style {
          shape browser
          color primary
        }
      }    
  }
  
  model {
  
    customer = person "Usuário" {
      description "Cliente do sistema que pode ser um técnico, inventor ou administrador"
    }
  
    bigbank = enterprise "Ecosistema SIAPI" {
  
      supportStaff = externo "GPAS" {
        description: "Sistema externo onde sao configurados os acessos/perfis dos usuários"
      }
  
      backoffice = person "Back Office Staff" {
        description: "Administration and support staff within the bank."
      }
  
      mainframe = softwaresystem "Base de usuário Petrobras" {
        description: "Armazena todos os usuários ativos da empresa usando a chave como base"
        style {
          shape: storage
          color: red
        }
      }
  
      email = softwaresystem "E-mail System" {
        description: "The internal Microsoft Exchange e-mail system."
        style {
          color: muted
        }
      }
  
      siapi = softwaresystem "SIAPI" {
        description: "Sistema de Transferencia 
                      e 
                      Propriedade Intelectual"
        technology: "Asp.net - Rodando em Windows Server 2012."
          style {
            shape rectangle
          }
          component singlePage 'Frontend' {
            description 'Asp.net - Rodando em Windows Server 2012'
            style {
              shape browser
            }
          }
          component backend 'Backend' {
            description '
              Implementa a parte de Business
              expondo dados ao Frontend via Jquery
            '
          }
          component bd 'Banco de Dados' {
            description 'Oracle 19G'
            style {
              shape storage
            }
          }
      }
  
      internetBankingSystem = softwaresystem "Internet Banking System" {
        description: "Allows customers to view information about their bank accounts, and make payments."
  
        singlePageApplication = container "Single-Page Application" {
          description: "Provides all of the Internet banking functionality to customers via their web browser."
          technology: "JavaScript and Angular"
          style {
            shape browser
          }
        }
        mobileApp = container "Mobile App" {
          description: "Provides a limited subset of the Internet banking functionality to customers via their mobile device."
          technology: "Xamarin"
          style {
            shape mobile
          }
        }
        webApplication = container "Web Application" {
          description: "Delivers the static content and the Internet banking single page application."
          technology: "Java and Spring MVC"
        }
        apiApplication = container "API Application" {
          description: "Provides Internet banking functionality via a JSON/HTTPS API."
          technology: "Java and Spring MVC"
  
          signinController = component "Sign In Controller" {
            description: "Allows users to sign in to the Internet Banking System."
            technology: "Spring MVC Rest Controller"
          }
  
          accountsSummaryController = component "Accounts Summary Controller" {
            description: "Provides customers with a summary of their bank accounts."
            technology: "Spring MVC Rest Controller"
          }
          resetPasswordController = component "Reset Password Controller" {
            description: "Allows users to reset their passwords with a single use URL."
            technology: "Spring MVC Rest Controller"
          }
          securityComponent = component "Security Component" {
            description: "Provides functionality related to signing in, changing passwords, etc."
            technology: "Spring Bean"
          }
          mainframeBankingSystemFacade = component "Mainframe Banking System Facade" {
            description: "A facade onto the mainframe banking system."
            technology: "Spring Bean"
          }
          emailComponent = component "E-mail Component"{
            description:  "Sends e-mails to users."
            technology: "Spring Bean"
          }
  
        }
        database = database "Database" {
          description: "Armazena dados do sistema, credenciais de autenticação com hash, logs de acesso, etc."
          technology: "Oracle 19G"
        }
      }
    }
  
    // relationships between people and software systems
    customer -> internetBankingSystem "Acessa o sistema via browser"
    internetBankingSystem -> mainframe "Gets account information from, and makes payments using"
    internetBankingSystem -> email "Sends e-mail using"
    email -> customer "Sends e-mails to"
    customer -> supportStaff "Solicita acesso via ServiceNow"
    supportStaff -> mainframe "Consulta e valida"
    customer -> siapi "Acessa via browser"
    siapi -> mainframe "Uses"
    backoffice -> mainframe "Uses"
  
    // relationships to/from containers
    customer -> webApplication "Visits bigbank.com using HTTPS"
    customer -> singlePageApplication "Views account balances, and makes payments using"
    customer -> mobileApp "Views account balances, and makes payments using"
    webApplication -> singlePageApplication "Delivers to the customer's web browser"
  
    // relationships to/from components
    singlePageApplication -> signinController "Makes API calls to"
    singlePageApplication -> accountsSummaryController "Makes API calls to"
    singlePageApplication -> resetPasswordController "Makes API calls to"
    mobileApp -> signinController "Makes API calls to"
    mobileApp -> accountsSummaryController "Makes API calls to"
    mobileApp -> resetPasswordController "Makes API calls to"
    signinController -> securityComponent "Uses"
    accountsSummaryController -> mainframeBankingSystemFacade "Uses"
    resetPasswordController -> securityComponent "Uses"
    resetPasswordController -> emailComponent "Uses"
    securityComponent -> database "Reads from and writes to"
    mainframeBankingSystemFacade -> mainframe "Makes API calls to"
    emailComponent -> email "Sends e-mail using"
    singlePage -> backend "Efetua requisicao para"
    backend -> bd "Solicita dados via query para"
    backend -> singlePage "Disponibiliza dado para"
    bd -> backend "Retorna dado solicitado para"
  
  }
  
  views {
  
    view index of bigbank {
      title "Big Bank - Landscape"
      include *
    }

    view siapi of siapi {
      include *
      style customer {
        color muted
      }
    }
  
    view context of bigbank {
      title "Internet Banking System - SystemContext"
      include
        bigbank,
        mainframe,
        internetBankingSystem,
        email,
        customer
  
      style * {
        color secondary
      }
      style bigbank, internetBankingSystem {
        color primary
      }
    }
  
    view ibsContainers of internetBankingSystem {
      title "Internet Banking System - Containers"
  
      include
        *,
        -> customer
    }
  
    view customer of customer {
      include
        *,
        customer -> internetBankingSystem.*,
        customer -> bigbank.*
      exclude webApplication
    }
  
    view spa of singlePageApplication {
      include
        *,
        apiApplication,
        internetBankingSystem,
        -> singlePageApplication ->
  
      style * {
        color muted
      }
  
      style singlePageApplication, customer {
        color primary
      }
    }
  
    view support of supportStaff {
      include
        *,
        bigbank,
        -> backoffice ->
    }
  
    view apiApp of internetBankingSystem.apiApplication {
      title "API Application - Components"
  
      include *
  
      style * {
        color muted
      }
  
      style singlePageApplication, mobileApp {
        color secondary
      }
  
      style apiApplication, apiApplication.* {
        color primary
      }
    }
  
    view webapp of webApplication {
      include
        *,
        internetBankingSystem,
        bigbank
  
      style bigbank {
        color muted
      }
    }
  
    view mobileApp of mobileApp {
      include
        *,
        internetBankingSystem,
        internetBankingSystem.apiApplication,
        mobileApp -> internetBankingSystem.apiApplication.*
  
      style * {
        color muted
      }
  
      style apiApplication.*, mobileApp {
        color primary
      }
  
      style customer {
        color secondary
      }
    }

  }
  